TODO:
* Z80 core GPL compliance (note changes and date of change)
* Too many global variables
* Not enough modularity?
* No error checking (esp. checking to see if files aren't found or are wrong dimensions/bpp)
* Z80 code gives lots of warnings in VC++
* Make SDL_mixer optional instead of required
* Use OpenGL instead of SDL for video (higher performance)?
* We don't reload graphics when toggling fullscreen (fullscreen mode may have different pixel format)
* Improper speed throttling
* Improper method of playing SFX (doesn't allow overlapping sounds of the same type, so will occasionally drop samples)
* Game assumes you're launching it from CWD (especially unlikely to be true on Unix)
* dkongjp has a different gfx ROM from dkong. What is the difference?
* CRC check ROMs
* Integrate functionality of gfxrip.py into emulator
* Allow ripping graphics from e.g. Japanese ROM
* Donkey Kong Junior? Mario Bros.?
* Does WIN32 get #define'd on MinGW? What about Cygwin?
* Picking up hammer spams "score" sound for 67 frames -- what to do? May be best to analyze how the original hardware worked...
* Are the sparks circling DK's head when he falls supposed to be dark orange or bright orange?
* Game occasionally (but rarely) crashes on exit (by clicking X in corner of SDL window)
* Move source to a 'src' directory?
* Optimization flags?
* Get palette colors from the PROMs?


Sound code:
* Hammer grab sound plays only once, not twice, when Mario picks up hammer. (This is because the game spams the "score" sound register for 64 frames, expecting the sound to play again after it finishes the first time.)


Regarding skipping music:
<EvanR> if its just music, you can create your own music callback
<EvanR> then it will loop

Using Mix_Chunk instead of Mix_Music also solves the problem, but I don't know if I want to go in that direction, since the music could get pretty big if the user has a lot of big OGGs.


To try out eventually:
Instead of using a readbyte function, simply allocate a 64KB array for your memory space and have all read operations simply read directly from it. (The same can't be done for writes, since DK does write to what would be ROM space.) Could speed up the Z80 emulator a lot...

(This does provide real gains -- the original version runs 1 billion cycles in 47 seconds and the optimized one runs in 33.5 seconds on my machine -- but it probably only makes a difference on systems that are so old that they'd probably have other problems running the emulator, like no decent OpenGL support.)
